# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'ru'
    emailFrom: '%env(MAILER_FROM)%'
    #hello_message : 'Hello from service'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
        #bind:
        #    $message: '%hello_message%'
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Twig\AppExtension:
        arguments:
            $locale: '%locale%'

    App\Mailer\Mailer:
        arguments:
            $mailFrom: '%emailFrom%'

    App\EventListener\LocaleSubscriber:
        arguments:
            - '%kernel.default_locale%'

    App\EventListener\UserSubscriber:
        arguments:
            $defaultLanguage: '%kernel.default_locale%'

    mongodb.odm.unit_of_work:
        class: Doctrine\ODM\MongoDB\UnitOfWork
        autowire: true
    Doctrine\ODM\MongoDB\UnitOfWork: '@mongodb.odm.unit_of_work'

    mongodb.odm.mapping.class_metadata:
        class: Doctrine\ODM\MongoDB\Mapping\ClassMetadata
        autowire: true
        arguments:
            $documentName: 'StdClass'
    Doctrine\ODM\MongoDB\Mapping\ClassMetadata: '@mongodb.odm.mapping.class_metadata'

    mongodb.common.event_manager:
        class: Doctrine\Common\EventManager
        autowire: true
    Doctrine\Common\EventManager: '@mongodb.common.event_manager'

    mongodb.odm.hydrator_factory:
        class: Doctrine\ODM\MongoDB\Hydrator\HydratorFactory
        autowire: true
        arguments:
            $hydratorDir: '/var/cache/dev/doctrine/odm/mongodb/Hydrators'
            $hydratorNs: 'App\Hydrator'
            $autoGenerate: 1
    Doctrine\ODM\MongoDB\Hydrator\HydratorFactory: '@mongodb.odm.hydrator_factory'

    App\Repositories\UserRepository:
        factory: ["@doctrine_mongodb", getRepository]
        arguments: # Note that this argument is passed to factory method (getRepository) not the service instance
            - App\Document\User
    App\Repositories\PostRepository:
        factory: ["@doctrine_mongodb", getRepository]
        arguments: # Note that this argument is passed to factory method (getRepository) not the service instance
            - App\Document\Post

    doctrine_mongo_db_param_converter:
        class: Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter
        tags:
        - { name: request.param_converter, converter: doctrine.odm }
        arguments: ['@doctrine_mongodb']

    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
      arguments:
            #- 'mysql:dbname=sym_prj'
            #- { db_username: root, db_password: 12345678 }
            - !service { class: PDO, factory: 'database_connection:getWrappedConnection' }
            - { lock_mode: 1}
    App\EventListener\LikeNotificationSubscriber:
        tags:
            - { name: doctrine.event_subscriber, event: onFlush, connection: default }
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
