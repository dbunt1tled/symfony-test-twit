security:
    encoders:
        #for db_provider
        App\Entity\User: bcrypt
        App\Document\User: bcrypt
        #for in_memory
        Symfony\Component\Security\Core\User\User: bcrypt
        # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        #our providers
        chain_providers:
            chain:
                providers: [ in_memory,mongo_db_provider, db_provider,jwt ]
        jwt:
            lexik_jwt: ~
        in_memory:
            memory:
                users:
                    denis:
                        password: $2y$13$WmhdMxxLExL1AT/jJZIj6e6f2iJaG1BiNiKx4D7pGgxb6Q/2ud71S
                        roles: 'ROLE_USER'
        db_provider:
            entity:
                class: App\Entity\User
                property: username
        mongo_db_provider:
            mongodb: {class: App\Document\User, property: email}
    firewalls:
        login:
            pattern:  ^/api/login
            stateless: true
            provider: mongo_db_provider
            anonymous: true
            json_login:
                check_path: /api/login_check
                username_path: username
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern:   ^/api
            stateless: true
            provider: mongo_db_provider
            guard:
                authenticators:
                - lexik_jwt_authentication.jwt_token_authenticator
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/
            user_checker: App\Security\UserChecker
            provider: chain_providers
            anonymous: true
            switch_user: true
            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path:     /
                remember_me_parameter: login[remember_me]
                # activate different ways to authenticate

                #http_basic: true
                # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            form_login:
                check_path: login
                login_path: login
                username_parameter: login[username]
                password_parameter: login[password]
                csrf_parameter: login[_token]
                csrf_token_generator: security.csrf.token_manager
                default_target_path: post_index
                #success_handler: autentificate.login.success
                #failure_handler: autentificate.login.failure
                # always_use_default_target_path: true
                # use_referer: true
                # failure_path:
            logout:
                path: /logout
                target: /
                invalidate_session: true
                delete_cookies: ~
                # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
    - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY}
    - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY}
    - { path: ^/logout, roles: IS_AUTHENTICATED_FULLY }
    # - { path: ^/admin, roles: ROLE_ADMIN }
    # - { path: ^/micro-post, roles: ROLE_USER }
    role_hierarchy:
        ROLE_MODERATOR: [ROLE_USER]
        ROLE_ADMIN: [ROLE_USER,ROLE_MODERATOR,ROLE_ALLOWED_TO_SWITCH,ROLE_PREVIOUS_ADMIN]